미숙한 부분
1. 쓰레드
runnable 인터페이스를 구현하고 객체로 생성하고,
Thread 객체를 생성할 때 runnable 객체를 매개변수로 넘김
SingleThreadEx2 ct = new SingleThreadEx2(); //runnable 인터페이스를 구현한 객체
Thread t = new Thread(ct,"첫번째"); //쓰레드 객체

2. HashMap + iterator
key, value 그리고 HashMap, iterator
이 부분은 사용되는 함수마다 반환값이 제각각이라서 억지로 외우지 말고 그때그때마다 검색해서 익숙해지는 편이 나아보임

3. .load()
페이지 로딩 메소드로 알고 있다. ajax랑 비슷하다고 생각되지만 따로 구현되어 있는 걸 보면 ajax랑 다른 부분이 있을 것

4. ajax
특정 페이지를 호출하고 그 페이지의 그 결과값을 html 형식 또는 text 형식 등등의 다양한 형태로 리턴받고,
그 값을 이용하여 html 페이지에 새롭게 그린다.
ex) teamProject에서 추천수 클릭 부분
-> jquery에서 추천버튼 클릭 시 -> ajax 실행 -> ajax가 추천.do를 호출 -> 추천.do는 컨트롤러에서 추천Action을 호출 -> Action -> Service -> DAO -> DB -> 추천수+1 -> 다시 Action으로 돌아오고 원래 같으면 forward 주소를 반환해서 컨트롤러에서 forward 또는 리다이렉트를 실행하지만, ajax의 경우 따로 forward를 시켜주지 않아도 추천수가 증가된 페이지의 Html 코드가 반환되어 ajax에서 Html 형식으로 받아 쓸 수 있었다. 이때, 모든 Html 코드를 받으면 낭비이니까, 애초에 action에서 out.println(추천수) 이런식으로 추천수만 넘긴다. 그러면 ajax에서 리턴값인 data를 찍어보면 html 코드 전체가 나오는게 아니라 추천수만 찍히게 된다.

5. join
두 테이블을 SELECT 할 때, 두 테이블의 공통 컬럼이 일치하는 데이터만 뽑아온다. 아마도 데이터 무결성을 유지하기 위함일듯?
ex) SELECT * FROM stu, circle WHERE stu.stu_no = circle.stu_no;
학생과 써클 테이블에 학번(stu_no) 컬럼이 있고, 만약 학생 테이블에 없는 학번이 써클 테이블에 있다면 잘못된 것이니 이를 방지함
(즉, 존재하지 않는 학생인데 써클 테이블에 있는 경우)

6. Html 디자인 + transform, transition + 미디어쿼리(PC, 태블릿, 모바일)
인터넷 검색하면 간단한 건 쉽게 할 듯

7. MVC 명확한 역할
V와 C는 역할이 명확하다.
하지만 M은 프로젝트 마다 다르게 나타난다.
구글링 해보니 어떤 프로젝트는 M에 Action이 없고 내가 하는 건 Action이 있는채로 배웠다.
Action은 View에 데이터를 전달하거나 받아올 수 있는 영역(request.getAttribute session 등등)이며 Service를 호출하는 영역이다.
Service는 DB커넥션과 DAO를 생성하고 생성된 커넥션을 DAO에 매개변수로 넘겨준다.
(DB커넥션[DataSource, Context, lookup() 등등] 이 부분은 한번만 작성해두면 건드릴 일이 없는 부분이라서 익숙하지 않을 게 분명함 그래서 아무것도 없는 상태에서 코딩할 경우 난관을 겪을 가능성이 큼)
DAO는 넘겨받은 커넥션을 이용하여 DB를 건드린다. 그나마 구분이 명확하다.
-> Action Service 이 두 영역은 솔직히 이름만으로 어떤 역할까지 딱 정해놓고 코딩해야할 지 감이 안온다.

8. api
공공데이터 사용하기 등
1. openApi 활용 신청하고 Key를 받는다.
만약 Key Error가 난다면 -> (Key를 받은 후 1시간이 지나야 사용될 수도 있다.) (Key를 디코딩 해줘야 할 수도 있다.)
2. JSON 또는 XML로 받을 수 있다. (둘다 자주 쓰는 듯)
3. JSON이나 XML이나 넘겨받은 데이터를 파싱해서 원하는 데이터만 쓰는 과정이 필요하다. (json-simple-1.1.1.jar)
(깊게는 해보지 않았지만 대충 해보니 문자열 다루기 같다.)
JSON ( JSONParser, JSONObject, JSONArray )
-> Parser로 전부 받아오고 JSONObject로 바꿔서 .get() 메소드 사용해서 데이터 뽑아왔던걸로 기억
XML ( DocumentBuilderFactory, DocumentBuilder, Document, NodeList )
-> 얘도 JSON처럼 어떤 객체에 넣어서 데이터를 뽑아냈던걸로 기억

9. 객체지향 소스코드 분리
이걸 잘한다면 난 이미 대형 프로젝트의 팀장으로 있었을 것

10. 소켓 프로그래밍
실시간 채팅?

11. 진수
2진수 8진수 16진수

12. 네트워크 개념
계층 라우터 게이트웨이 IP 프로토콜 프레임

13. jdk / jre
Java Developer Kit (자바 개발 도구) -> 자바로 프로그램을 개발하기 위한 도구(개발된 걸 실행하려면 jre가 필요한가?)
Java Runtime Enviroment (자바 실행 환경) -> 자바로 짜여진 프로그램을 실행하기 위한 것(그럼 클라이언트 입장에선 JRE만 필요한가?)

14. 깃허브
지금 걍 네이버 블로그마냥 쓰고있는데 풀, 푸쉬를 제대로 해 본 적이 없어서 아쉽다.

15. 크롤링 (jsoup.jar)
jsoup말고 셀레니움? 이란 거에도 크롤링 기능이 있는 듯한데, 뭐 아무튼 다양한 라이브러리가 있는 듯하다.
이것도 openApi처럼 문자열 다루기인것 같다.
특정 사이트에 커넥션해서 데이터를 읽어 오고, 필요한 데이터를 뽑아내는 과정이 문자열 다루기 같다.
